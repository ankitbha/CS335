
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'modulerightASSIGNleftORleftANDleftEQUALNEQUALleftGTGTEQLTLTEQleftPLUSMINUSleftMULTIPLYDIVIDEMODULUSrightNOTleftDOTAND ASSIGN AT COLON COMMA DIVIDE DOT EQUAL GT GTEQ IDENT KEY_ABS KEY_ADD KEY_ARRAY KEY_BEGIN KEY_BOOLEAN KEY_BREAK KEY_CASE KEY_CHAR KEY_CHR KEY_CONST KEY_CONTINUE KEY_DEL KEY_DO KEY_ELSE KEY_ELSEIF KEY_END KEY_EXIT KEY_FCLOSE KEY_FOPEN KEY_FOR KEY_FPRINTF KEY_FREAD KEY_IF KEY_IN KEY_INTEGER KEY_IS KEY_MODULE KEY_NEW KEY_NIL KEY_OF KEY_ORD KEY_POINTER KEY_PROCEDURE KEY_READ KEY_READBOOL KEY_READCHAR KEY_READINT KEY_READREAL KEY_REAL KEY_RECORD KEY_RETURN KEY_SET KEY_STRING KEY_SWITCH KEY_THEN KEY_TO KEY_TYPE KEY_VAR KEY_WHILE KEY_WRITE KEY_WRITEBOOL KEY_WRITECHAR KEY_WRITEINT KEY_WRITELN KEY_WRITEREAL LCB LRB LSB LT LTEQ MINUS MODULUS MULTIPLY NEQUAL NOT OR PLUS RCB RRB RSB SCOLON VBOOLEAN VCHAR VINTEGER VREAL VSTRING\n\t\t\tmodule : KEY_MODULE IDENT SCOLON declarationSequence KEY_BEGIN statementSequence KEY_END IDENT DOT\n\t\t\n\t\t\tdeclarationSequence : declarationSequence KEY_CONST conss\n\t\t\t\t\t\t\t\t| declarationSequence KEY_TYPE typess\n\t\t\t\t\t\t\t\t| declarationSequence KEY_VAR varss\n\t\t\t\t\t\t\t\t| declarationSequence procss\n\t\t\t\t\t\t\t\t| empty\n\t\t\n\t\t\tconss : conss constantDeclaration SCOLON\n\t\t\t\t  | constantDeclaration SCOLON\n\t\t\n\t\t\ttypess : typess typeDeclaration SCOLON\n\t\t\t\t  | typeDeclaration SCOLON\n\t\t\n\t\t\tvarss : varss variableDeclaration SCOLON\n\t\t\t\t  | variableDeclaration SCOLON\n\t\t\n\t\t\tprocss : procss procedureDeclaration SCOLON\n\t\t\t\t   | procedureDeclaration SCOLON\n\t\t\n\t\t\tstatementSequence : statementSequence statement SCOLON\n\t\t\t\t\t\t\t  | empty\n\t\t\n\t\t\tconstantDeclaration : IDENT ASSIGN expression COLON type\n\t\t\n\t\t\texpression : simpleExpression\n\t\t\t\t\t   | simpleExpression relation simpleExpression\n\t\t\n\t\t\tsimpleExpression : PLUS term simpless\n\t\t\t\t\t\t\t | term simpless\n\t\t\t\t\t\t\t | MINUS term simpless\n\t\t\n\t\t\tsimpless : simpless addOperator term\n\t\t\t\t\t | empty\n\t\t\n\t\t\tterm : factor termss\n\t\t\n\t\t\ttermss : termss mulOperator factor\n\t\t\t\t   | empty\n\t\t\n\t\t\tfactor : number\n\t\t\t\t   | boolean\n\t\t\t\t   | char\n\t\t\t\t   | string\n\t\t\t\t   | KEY_NIL LRB designator RRB\n\t\t\t\t   | set\n\t\t\t\t   | designator\n\t\t\t\t   | designator actualParameters\n\t\t\t\t   | LRB expression RRB\n\t\t\t\t   | NOT factor\n\t\t\t\t   | KEY_ABS factor\n\t\t\t\t   | KEY_CHR factor\n\t\t\t\t   | KEY_ORD factor\n\t\t\t\t   | KEY_INTEGER\n\t\t\t\t   | KEY_BOOLEAN\n\t\t\t\t   | KEY_CHAR\n\t\t\t\t   | KEY_STRING\n\t\t\t\t   | KEY_REAL\n\t\t\t\t   | KEY_SET\n\t\t\t\t   | KEY_CHR LRB factor RRB\n\t\t\t\t   | KEY_ORD LRB factor RRB\n\t\t\n\t\t\tnumber : VINTEGER\n\t\t\t\t   | VREAL\n\t\t\n\t\t\tboolean : VBOOLEAN\n\t\t\n\t\t\tchar : VCHAR\n\t\t\n\t\t\tstring : VSTRING\n\t\t\n\t\t\tset : LCB element COMMA element RCB\n\t\t\t\t| LCB RCB\n\t\t\n\t\t\telement : expression\n\t\t\n\t\t\tdesignator : qualident designator2\n\t\t\n\t\t\tdesignator2 : designator2 DOT identdef\n\t\t\t\t\t\t| designator2 LSB expList RSB\n\t\t\t\t\t\t| empty\n\t\t\n\t\t\tqualident : identdef\n\t\t\t\t\t  | identdef DOT qualident\n\t\t\n\t\t\tidentdef : IDENT\n\t\t\t\t\t | AT IDENT\n\t\t\n\t\t\texpList : expList COMMA expression\n\t\t\t\t\t| expression\n\t\t\n\t\t\tactualParameters : LRB expList RRB\n\t\t\t\t\t\t\t | LRB RRB\n\t\t\n\t\t\tmulOperator : MULTIPLY\n\t\t\t\t\t\t| DIVIDE\n\t\t\t\t\t\t| MODULUS\n\t\t\t\t\t\t| AND\n\t\t\n\t\t\taddOperator : PLUS\n\t\t\t\t\t\t| MINUS\n\t\t\t\t\t\t| OR\n\t\t\n\t\t\trelation : EQUAL\n\t\t\t\t\t | NEQUAL\n\t\t\t\t\t | LT\n\t\t\t\t\t | LTEQ\n\t\t\t\t\t | GT\n\t\t\t\t\t | GTEQ\n\t\t\t\t\t | KEY_IN\n\t\t\t\t\t | KEY_IS\n\t\t\n\t\t\ttypeDeclaration : IDENT EQUAL type\n\t\t\n\t\t\ttype : IDENT\n\t\t\t\t | varType\n\t\t\t\t | arrayType\n\t\t\t\t | recordType\n\t\t\t\t | pointerType\n\t\t\n\t\t\tvarType : KEY_INTEGER\n\t\t\t\t\t| KEY_BOOLEAN\n\t\t\t\t\t| KEY_CHAR\n\t\t\t\t\t| KEY_STRING\n\t\t\t\t\t| KEY_REAL\n\t\t\t\t\t| KEY_SET\n\t\t\n\t\t\tarrayType : KEY_ARRAY length comass KEY_OF type\n\t\t\n\t\t\tcomass : comass COMMA length\n\t\t\t\t   | empty\n\t\t\n\t\t\tlength : expression\n\t\t\n\t\t\trecordType : KEY_RECORD fieldListSequence KEY_END\n\t\t\t\t\t   | KEY_RECORD LRB baseType RRB fieldListSequence KEY_END\n\t\t\n\t\t\tbaseType : qualident\n\t\t\n\t\t\tfieldListSequence : fieldListSequence SCOLON fieldList\n\t\t\t\t\t\t\t  | fieldList\n\t\t\n\t\t\tfieldList : identList COLON type\n\t\t\t\t\t  | empty\n\t\t\n\t\t\tidentList : identList COMMA IDENT\n\t\t\t\t\t  | IDENT\n\t\t\n\t\t\tpointerType : KEY_POINTER KEY_TO type\n\t\t\n\t\t\tvariableDeclaration : identList COLON type\n\t\t\n\t\t\tprocedureDeclaration : procedureHeading SCOLON procedureBody IDENT\n\t\t\n\t\t\tprocedureHeading : KEY_PROCEDURE IDENT formalParameters COLON type\n\t\t\t\t\t\t\t | KEY_PROCEDURE IDENT formalParameters\n\t\t\n\t\t\tformalParameters : LRB fpSection formalss RRB\n\t\t\t\t\t\t\t | LRB RRB\n\t\t\n\t\t\tformalss : formalss SCOLON fpSection\n\t\t\t\t\t | empty\n\t\t\n\t\t\tfpSection : IDENT fps COLON type\n\t\t\n\t\t\tfps : fps COMMA IDENT\n\t\t\t\t| empty\n\t\t\n\t\t\tprocedureBody : declarationSequence KEY_BEGIN statementSequence KEY_END\n\t\t\n\t\t\tstatement : assignment\n\t\t\t\t\t  | procedureCall\n\t\t\t\t\t  | ifStatement\n\t\t\t\t\t  | switchStatement\n\t\t\t\t\t  | whileStatement\n\t\t\t\t\t  | forStatement\n\t\t\t\t\t  | doWhileStatement\n\t\t\t\t\t  | KEY_EXIT\n\t\t\t\t\t  | KEY_RETURN expression\n\t\t\t\t\t  | KEY_RETURN\n\t\t\t\t\t  | ioStatement\n\t\t\t\t\t  | fileStatement\n\t\t\t\t\t  | KEY_BREAK\n\t\t\t\t\t  | KEY_CONTINUE\n\t\t\t\t\t  | empty\n\t\t\t\t\t  | memoryalloc\n\t\t\t\t\t  | setStatement\n\t\t\n\t\t\tassignment : designator ASSIGN expression\n\t\t\n\t\t\tsetStatement : KEY_ADD LRB qualident COMMA expression RRB\n\t\t\t\t\t\t | KEY_DEL LRB qualident COMMA expression RRB\n\n\t\t\n\t\t\tmemoryalloc : KEY_NEW LRB designator RRB\n\t\t\n\t\t\tprocedureCall : designator actualParameters\n\t\t\t\t\t\t  | designator\n\t\t\n\t\t\tifStatement : KEY_IF expression KEY_THEN statementSequence ifss KEY_ELSE statementSequence KEY_END\n\t\t\t\t\t\t| KEY_IF expression KEY_THEN statementSequence ifss KEY_END\n\t\t\n\t\t\tifss : ifss KEY_ELSEIF expression KEY_THEN statementSequence\n\t\t\t\t | empty\n\t\t\n\t\t\tswitchStatement : KEY_SWITCH expression KEY_BEGIN case casess KEY_ELSE COLON statementSequence KEY_END\n\t\t\t\t\t\t\t| KEY_SWITCH expression KEY_BEGIN case casess KEY_END\n\t\t\n\t\t\tcasess : case casess\n\t\t\t\t   | empty\n\t\t\n\t\t\tcase : KEY_CASE expression COLON statementSequence\n\t\t\n\t\t\twhileStatement : KEY_WHILE expression KEY_BEGIN statementSequence KEY_END\n\t\t\n\t\t\tforStatement : KEY_FOR LRB assignment SCOLON expression SCOLON assignment RRB KEY_BEGIN statementSequence KEY_END\n\t\t\n\t\t\tdoWhileStatement : KEY_DO KEY_BEGIN statementSequence KEY_END KEY_WHILE expression\n\t\t\n\t\t\tioStatement : KEY_WRITE LRB expression RRB\n\t\t\t\t\t\t| KEY_WRITEINT LRB expression RRB\n\t\t\t\t\t\t| KEY_WRITEREAL LRB expression RRB\n\t\t\t\t\t\t| KEY_WRITECHAR LRB expression RRB\n\t\t\t\t\t\t| KEY_WRITEBOOL LRB expression RRB\n\t\t\t\t\t\t| KEY_WRITELN LRB expression RRB\n\t\t\t\t\t\t| KEY_WRITELN LRB RRB\n\t\t\t\t\t\t| KEY_READ LRB expression RRB\n\t\t\t\t\t\t| KEY_READINT LRB expression RRB\n\t\t\t\t\t\t| KEY_READREAL LRB expression RRB\n\t\t\t\t\t\t| KEY_READCHAR LRB expression RRB\n\t\t\t\t\t\t| KEY_READBOOL LRB expression RRB\n\t\t\n\t\t\tfileStatement : identdef EQUAL KEY_FOPEN LRB string COMMA char RRB\n\t\t\t\t\t\t  | KEY_FCLOSE LRB identdef RRB\n\t\t\t\t\t\t  | KEY_FPRINTF LRB identdef COMMA string RRB\n\t\t\t\t\t\t  | KEY_FREAD LRB identdef COMMA identdef COMMA VINTEGER RRB\n\t\t\n\t\t\tempty :\n\t\t'
    
_lr_action_items = {'KEY_SWITCH':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,46,-173,-15,-173,-173,46,-173,46,46,46,-173,-173,-173,46,46,46,-173,-173,46,46,]),'KEY_WRITEBOOL':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,33,-173,-15,-173,-173,33,-173,33,33,33,-173,-173,-173,33,33,33,-173,-173,33,33,]),'KEY_TO':([156,],[241,]),'KEY_TYPE':([4,5,6,10,19,23,25,27,30,77,81,83,85,86,169,172,175,],[-173,-6,8,-5,-3,-4,-173,-2,-14,-10,-12,-13,8,-8,-9,-11,-7,]),'PLUS':([34,37,46,57,72,75,88,92,95,97,98,102,103,104,105,106,108,109,110,111,112,113,115,116,117,118,119,120,121,123,126,127,128,134,135,136,137,139,141,142,143,145,147,149,153,164,185,186,187,188,189,190,191,192,193,194,195,196,197,198,200,201,202,204,207,208,209,210,211,218,225,229,256,259,265,267,268,269,275,283,287,288,290,297,299,317,318,319,321,322,323,331,340,346,357,],[94,94,94,-173,94,-63,94,94,-28,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,94,-42,-29,-41,94,-30,-173,-44,-33,-43,94,94,94,94,94,94,94,94,-57,-60,94,94,94,-64,94,94,-173,-82,-80,-77,-76,-79,94,-78,-81,-83,-24,264,94,-40,-37,-35,-173,-38,-55,-27,-25,94,-39,-62,-68,94,94,264,-173,264,-36,94,-173,94,94,-67,-58,94,94,-23,-48,-32,-26,-47,94,-59,94,-54,94,]),'KEY_BEGIN':([4,5,6,10,19,23,25,27,30,43,57,75,77,81,83,85,86,93,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,132,141,142,149,169,172,175,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,260,267,268,288,290,317,318,319,321,322,331,346,371,],[-173,-6,7,-5,-3,-4,-173,-2,-14,129,-173,-63,-10,-12,-13,174,-8,184,-28,-18,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,219,-57,-60,-64,-9,-11,-7,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-19,-22,-36,-67,-58,-23,-48,-32,-26,-47,-59,-54,377,]),'NOT':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,357,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-82,-80,-77,-76,-79,101,-78,-81,-83,101,101,101,101,-74,-75,101,-73,101,-71,-72,-69,-70,101,101,101,101,101,101,101,101,]),'KEY_WRITEREAL':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,49,-173,-15,-173,-173,49,-173,49,49,49,-173,-173,-173,49,49,49,-173,-173,49,49,]),'VREAL':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,357,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-82,-80,-77,-76,-79,102,-78,-81,-83,102,102,102,102,-74,-75,102,-73,102,-71,-72,-69,-70,102,102,102,102,102,102,102,102,]),'COMMA':([20,21,57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,171,178,185,195,196,198,200,201,202,204,205,206,207,208,209,211,218,220,224,225,226,234,237,239,242,247,248,253,254,259,260,267,268,288,290,291,307,308,317,318,319,321,322,324,329,330,331,344,346,361,],[80,-108,-173,-63,-28,-18,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-107,-173,-173,-24,-21,-40,-37,-35,-173,-38,269,-56,-55,-27,-25,-39,-62,284,-66,-68,287,295,297,299,80,-173,-99,-120,314,-20,-19,-22,-36,-67,-58,287,-98,340,-23,-48,-32,-26,-47,348,353,-65,-59,-119,-54,-97,]),'VCHAR':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,348,357,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-82,-80,-77,-76,-79,97,-78,-81,-83,97,97,97,97,-74,-75,97,-73,97,-71,-72,-69,-70,97,97,97,97,97,97,97,97,97,]),'KEY_WRITE':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,41,-173,-15,-173,-173,41,-173,41,41,41,-173,-173,-173,41,41,41,-173,-173,41,41,]),'KEY_WRITEINT':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,42,-173,-15,-173,-173,42,-173,42,42,42,-173,-173,-173,42,42,42,-173,-173,42,42,]),'KEY_NIL':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,357,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-82,-80,-77,-76,-79,100,-78,-81,-83,100,100,100,100,-74,-75,100,-73,100,-71,-72,-69,-70,100,100,100,100,100,100,100,100,]),'KEY_MODULE':([0,],[1,]),'LTEQ':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,265,267,268,275,288,290,317,318,319,321,322,331,346,],[-173,-63,-28,190,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-173,-22,-36,-173,-67,-58,-23,-48,-32,-26,-47,-59,-54,]),'OR':([57,75,95,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,265,267,268,275,288,290,317,318,319,321,322,331,346,],[-173,-63,-28,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,262,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,262,-173,262,-36,-173,-67,-58,-23,-48,-32,-26,-47,-59,-54,]),'GT':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,265,267,268,275,288,290,317,318,319,321,322,331,346,],[-173,-63,-28,187,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-173,-22,-36,-173,-67,-58,-23,-48,-32,-26,-47,-59,-54,]),'KEY_FOPEN':([130,],[217,]),'KEY_FOR':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,32,-173,-15,-173,-173,32,-173,32,32,32,-173,-173,-173,32,32,32,-173,-173,32,32,]),'KEY_FREAD':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,47,-173,-15,-173,-173,47,-173,47,47,47,-173,-173,-173,47,47,47,-173,-173,47,47,]),'GTEQ':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,265,267,268,275,288,290,317,318,319,321,322,331,346,],[-173,-63,-28,193,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-173,-22,-36,-173,-67,-58,-23,-48,-32,-26,-47,-59,-54,]),'KEY_WRITECHAR':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,50,-173,-15,-173,-173,50,-173,50,50,50,-173,-173,-173,50,50,50,-173,-173,50,50,]),'EQUAL':([17,44,57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,265,267,268,275,288,290,317,318,319,321,322,331,346,],[76,130,-173,-63,-28,189,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-173,-22,-36,-173,-67,-58,-23,-48,-32,-26,-47,-59,-54,]),'KEY_POINTER':([76,79,180,241,250,302,313,341,],[156,156,156,156,156,156,156,156,]),'DIVIDE':([57,75,95,97,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,198,200,201,204,207,208,209,211,218,225,265,268,275,288,290,318,319,321,322,331,346,],[-173,-63,-28,-52,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-40,-37,-35,-38,-55,-27,273,-39,-62,-68,-173,-36,-173,-67,-58,-48,-32,-26,-47,-59,-54,]),'KEY_READ':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,54,-173,-15,-173,-173,54,-173,54,54,54,-173,-173,-173,54,54,54,-173,-173,54,54,]),'VINTEGER':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,353,357,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-82,-80,-77,-76,-79,109,-78,-81,-83,109,109,109,109,-74,-75,109,-73,109,-71,-72,-69,-70,109,109,109,109,109,109,109,367,109,]),'KEY_IN':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,265,267,268,275,288,290,317,318,319,321,322,331,346,],[-173,-63,-28,186,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-173,-22,-36,-173,-67,-58,-23,-48,-32,-26,-47,-59,-54,]),'KEY_SET':([34,37,46,72,76,79,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,180,186,187,188,189,190,191,192,193,194,197,210,229,241,250,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,302,313,323,340,341,357,],[110,110,110,110,158,158,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,158,-82,-80,-77,-76,-79,110,-78,-81,-83,110,110,110,158,158,110,-74,-75,110,-73,110,-71,-72,-69,-70,110,110,110,110,110,158,158,110,110,158,110,]),'KEY_WRITELN':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,64,-173,-15,-173,-173,64,-173,64,64,64,-173,-173,-173,64,64,64,-173,-173,64,64,]),'KEY_CONTINUE':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,58,-173,-15,-173,-173,58,-173,58,58,58,-173,-173,-173,58,58,58,-173,-173,58,58,]),'KEY_IF':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,72,-173,-15,-173,-173,72,-173,72,72,72,-173,-173,-173,72,72,72,-173,-173,72,72,]),'LT':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,265,267,268,275,288,290,317,318,319,321,322,331,346,],[-173,-63,-28,192,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-173,-22,-36,-173,-67,-58,-23,-48,-32,-26,-47,-59,-54,]),'RRB':([57,75,89,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,137,141,142,145,149,154,157,158,159,161,162,163,165,166,167,168,177,183,185,195,196,198,200,201,202,203,204,207,208,209,211,212,213,214,215,218,221,222,223,224,225,226,227,230,231,232,235,240,251,252,259,260,265,266,267,268,275,288,290,301,304,305,306,317,318,319,321,322,330,331,332,333,336,342,343,346,362,363,364,367,370,],[-173,-63,179,-28,-18,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,225,-57,-60,233,-64,-86,-88,-95,-91,-89,-87,-90,-93,-85,-94,-92,-173,257,-173,-24,-21,-40,-37,-35,-173,268,-38,-55,-27,-25,-39,276,277,278,279,-62,285,286,-139,-66,-68,288,289,292,293,294,296,300,312,-117,-20,-19,318,319,-22,-36,322,-67,-58,-109,-100,339,-102,-23,-48,-32,-26,-47,-65,-59,354,355,359,-116,-118,-54,-96,371,372,374,-101,]),'KEY_DEL':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,71,-173,-15,-173,-173,71,-173,71,71,71,-173,-173,-173,71,71,71,-173,-173,71,71,]),'NEQUAL':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,265,267,268,275,288,290,317,318,319,321,322,331,346,],[-173,-63,-28,188,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-173,-22,-36,-173,-67,-58,-23,-48,-32,-26,-47,-59,-54,]),'KEY_INTEGER':([34,37,46,72,76,79,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,180,186,187,188,189,190,191,192,193,194,197,210,229,241,250,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,302,313,323,340,341,357,],[116,116,116,116,163,163,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,163,-82,-80,-77,-76,-79,116,-78,-81,-83,116,116,116,163,163,116,-74,-75,116,-73,116,-71,-72,-69,-70,116,116,116,116,116,163,163,116,116,163,116,]),'KEY_CHR':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,357,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-82,-80,-77,-76,-79,122,-78,-81,-83,122,122,122,122,-74,-75,122,-73,122,-71,-72,-69,-70,122,122,122,122,122,122,122,122,]),'KEY_THEN':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,151,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,260,267,268,288,290,317,318,319,321,322,331,346,368,],[-173,-63,-28,-18,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,238,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-19,-22,-36,-67,-58,-23,-48,-32,-26,-47,-59,-54,375,]),'RSB':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,224,225,259,260,267,268,288,290,291,317,318,319,321,322,330,331,346,],[-173,-63,-28,-18,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-66,-68,-20,-19,-22,-36,-67,-58,331,-23,-48,-32,-26,-47,-65,-59,-54,]),'KEY_READINT':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,74,-173,-15,-173,-173,74,-173,74,74,74,-173,-173,-173,74,74,74,-173,-173,74,74,]),'MODULUS':([57,75,95,97,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,198,200,201,204,207,208,209,211,218,225,265,268,275,288,290,318,319,321,322,331,346,],[-173,-63,-28,-52,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-40,-37,-35,-38,-55,-27,270,-39,-62,-68,-173,-36,-173,-67,-58,-48,-32,-26,-47,-59,-54,]),'AND':([57,75,95,97,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,198,200,201,204,207,208,209,211,218,225,265,268,275,288,290,318,319,321,322,331,346,],[-173,-63,-28,-52,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-40,-37,-35,-38,-55,-27,271,-39,-62,-68,-173,-36,-173,-67,-58,-48,-32,-26,-47,-59,-54,]),'MULTIPLY':([57,75,95,97,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,198,200,201,204,207,208,209,211,218,225,265,268,275,288,290,318,319,321,322,331,346,],[-173,-63,-28,-52,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-40,-37,-35,-38,-55,-27,272,-39,-62,-68,-173,-36,-173,-67,-58,-48,-32,-26,-47,-59,-54,]),'KEY_READREAL':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,59,-173,-15,-173,-173,59,-173,59,59,59,-173,-173,-173,59,59,59,-173,-173,59,59,]),'$end':([2,236,],[0,-1,]),'KEY_CHAR':([34,37,46,72,76,79,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,180,186,187,188,189,190,191,192,193,194,197,210,229,241,250,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,302,313,323,340,341,357,],[123,123,123,123,168,168,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,168,-82,-80,-77,-76,-79,123,-78,-81,-83,123,123,123,168,168,123,-74,-75,123,-73,123,-71,-72,-69,-70,123,123,123,123,123,168,168,123,123,168,123,]),'KEY_OF':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,247,248,259,260,267,268,288,290,307,308,317,318,319,321,322,331,346,361,],[-173,-63,-28,-18,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-173,-99,-20,-19,-22,-36,-67,-58,-98,341,-23,-48,-32,-26,-47,-59,-54,-97,]),'KEY_NEW':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,36,-173,-15,-173,-173,36,-173,36,36,36,-173,-173,-173,36,36,36,-173,-173,36,36,]),'KEY_FPRINTF':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,65,-173,-15,-173,-173,65,-173,65,65,65,-173,-173,-173,65,65,65,-173,-173,65,65,]),'KEY_ARRAY':([76,79,180,241,250,302,313,341,],[164,164,164,164,164,164,164,164,]),'KEY_RETURN':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,37,-173,-15,-173,-173,37,-173,37,37,37,-173,-173,-173,37,37,37,-173,-173,37,37,]),'KEY_READCHAR':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,39,-173,-15,-173,-173,39,-173,39,39,39,-173,-173,-173,39,39,39,-173,-173,39,39,]),'DOT':([44,57,75,111,141,142,148,149,218,290,331,],[131,-173,-63,131,228,-60,236,-64,-62,-58,-59,]),'KEY_ORD':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,357,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-82,-80,-77,-76,-79,99,-78,-81,-83,99,99,99,99,-74,-75,99,-73,99,-71,-72,-69,-70,99,99,99,99,99,99,99,99,]),'KEY_DO':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,43,-173,-15,-173,-173,43,-173,43,43,43,-173,-173,-173,43,43,43,-173,-173,43,43,]),'KEY_CASE':([15,140,219,282,326,352,366,],[-16,-15,283,283,283,-173,-153,]),'KEY_PROCEDURE':([4,5,6,10,19,23,25,27,30,77,81,83,85,86,169,172,175,],[-173,-6,13,13,-3,-4,-173,-2,-14,-10,-12,-13,13,-8,-9,-11,-7,]),'KEY_IS':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,207,208,209,211,218,225,259,265,267,268,275,288,290,317,318,319,321,322,331,346,],[-173,-63,-28,194,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,-20,-173,-22,-36,-173,-67,-58,-23,-48,-32,-26,-47,-59,-54,]),'LSB':([44,57,75,111,141,142,149,218,290,331,],[-61,-173,-63,-61,229,-60,-64,-62,-58,-59,]),'VBOOLEAN':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,357,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-82,-80,-77,-76,-79,103,-78,-81,-83,103,103,103,103,-74,-75,103,-73,103,-71,-72,-69,-70,103,103,103,103,103,103,103,103,]),'KEY_REAL':([34,37,46,72,76,79,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,180,186,187,188,189,190,191,192,193,194,197,210,229,241,250,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,302,313,323,340,341,357,],[104,104,104,104,167,167,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,167,-82,-80,-77,-76,-79,104,-78,-81,-83,104,104,104,167,167,104,-74,-75,104,-73,104,-71,-72,-69,-70,104,104,104,104,104,167,167,104,104,167,104,]),'KEY_ELSEIF':([15,140,238,298,334,335,375,379,],[-16,-15,-173,-173,-148,357,-173,-147,]),'KEY_WHILE':([7,15,16,129,140,174,184,216,238,249,258,280,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,34,-173,-15,-173,-173,34,-173,34,34,323,34,-173,-173,-173,34,34,34,-173,-173,34,34,]),'MINUS':([34,37,46,57,72,75,88,92,95,97,98,102,103,104,105,106,108,109,110,111,112,113,115,116,117,118,119,120,121,123,126,127,128,134,135,136,137,139,141,142,143,145,147,149,153,164,185,186,187,188,189,190,191,192,193,194,195,196,197,198,200,201,202,204,207,208,209,210,211,218,225,229,256,259,265,267,268,269,275,283,287,288,290,297,299,317,318,319,321,322,323,331,340,346,357,],[107,107,107,-173,107,-63,107,107,-28,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,107,-42,-29,-41,107,-30,-173,-44,-33,-43,107,107,107,107,107,107,107,107,-57,-60,107,107,107,-64,107,107,-173,-82,-80,-77,-76,-79,107,-78,-81,-83,-24,261,107,-40,-37,-35,-173,-38,-55,-27,-25,107,-39,-62,-68,107,107,261,-173,261,-36,107,-173,107,107,-67,-58,107,107,-23,-48,-32,-26,-47,107,-59,107,-54,107,]),'VSTRING':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,281,283,287,295,297,299,323,340,357,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-82,-80,-77,-76,-79,105,-78,-81,-83,105,105,105,105,-74,-75,105,-73,105,-71,-72,-69,-70,105,105,105,105,105,105,105,105,105,105,]),'KEY_ELSE':([15,140,238,282,298,325,326,327,334,335,351,352,366,375,379,],[-16,-15,-173,-173,-173,349,-173,-152,-148,358,-151,-173,-153,-173,-147,]),'ASSIGN':([28,44,52,57,75,111,141,142,149,182,218,290,331,],[88,-61,136,-173,-63,-61,-57,-60,-64,136,-62,-58,-59,]),'LRB':([29,32,33,34,36,37,39,41,42,44,46,47,49,50,52,54,57,59,60,64,65,67,71,72,73,74,75,88,92,94,99,100,101,106,107,111,112,114,117,122,126,127,128,134,135,136,137,139,141,142,143,145,147,149,153,160,164,186,187,188,189,190,191,192,193,194,197,210,217,218,229,256,261,262,263,264,269,270,271,272,273,274,283,287,290,297,299,323,331,340,357,],[89,91,92,112,124,112,126,127,128,-61,112,133,134,135,137,139,-173,143,144,145,146,147,150,112,152,153,-63,112,112,112,197,199,112,137,112,-61,112,112,112,210,112,112,112,112,112,112,112,112,-57,-60,112,112,112,-64,112,245,112,-82,-80,-77,-76,-79,112,-78,-81,-83,112,112,281,-62,112,112,-74,-75,112,-73,112,-71,-72,-69,-70,112,112,112,-58,112,112,112,-59,112,112,]),'KEY_BOOLEAN':([34,37,46,72,76,79,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,180,186,187,188,189,190,191,192,193,194,197,210,229,241,250,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,302,313,323,340,341,357,],[113,113,113,113,159,159,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,159,-82,-80,-77,-76,-79,113,-78,-81,-83,113,113,113,159,159,113,-74,-75,113,-73,113,-71,-72,-69,-70,113,113,113,113,113,159,159,113,113,159,113,]),'KEY_ABS':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,357,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-82,-80,-77,-76,-79,114,-78,-81,-83,114,114,114,114,-74,-75,114,-73,114,-71,-72,-69,-70,114,114,114,114,114,114,114,114,]),'KEY_RECORD':([76,79,180,241,250,302,313,341,],[160,160,160,160,160,160,160,160,]),'KEY_VAR':([4,5,6,10,19,23,25,27,30,77,81,83,85,86,169,172,175,],[-173,-6,9,-5,-3,-4,-173,-2,-14,-10,-12,-13,9,-8,-9,-11,-7,]),'RCB':([57,75,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,117,118,119,120,121,123,141,142,149,185,195,196,198,200,201,202,204,206,207,208,209,211,218,225,259,260,267,268,288,290,317,318,319,320,321,322,331,346,],[-173,-63,-28,-18,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,207,-30,-173,-44,-33,-43,-57,-60,-64,-173,-24,-21,-40,-37,-35,-173,-38,-56,-55,-27,-25,-39,-62,-68,-20,-19,-22,-36,-67,-58,-23,-48,-32,346,-26,-47,-59,-54,]),'KEY_FCLOSE':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,60,-173,-15,-173,-173,60,-173,60,60,60,-173,-173,-173,60,60,60,-173,-173,60,60,]),'KEY_EXIT':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,61,-173,-15,-173,-173,61,-173,61,61,61,-173,-173,-173,61,61,61,-173,-173,61,61,]),'COLON':([20,21,57,75,90,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,141,142,149,171,176,178,179,185,195,196,198,200,201,202,204,207,208,209,211,218,225,242,253,254,259,260,267,268,288,290,312,317,318,319,321,322,328,331,344,346,349,],[79,-108,-173,-63,180,-28,-18,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-57,-60,-64,-107,250,-173,-115,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-62,-68,302,-120,313,-20,-19,-22,-36,-67,-58,-114,-23,-48,-32,-26,-47,352,-59,-119,-54,365,]),'SCOLON':([3,7,11,14,15,16,18,22,24,26,31,35,37,38,40,44,45,48,51,52,53,55,56,57,58,61,62,63,66,70,75,78,82,87,90,95,96,97,98,102,103,104,105,106,108,109,110,111,113,115,116,118,119,120,121,123,125,129,138,140,141,142,149,154,155,157,158,159,160,161,162,163,165,166,167,168,170,173,174,177,179,181,184,185,195,196,198,200,201,202,204,207,208,209,211,216,218,223,225,233,238,243,244,246,249,251,252,255,257,258,259,260,267,268,276,277,278,279,285,286,288,289,290,292,293,294,296,298,300,301,303,304,310,312,315,316,317,318,319,321,322,331,334,337,338,339,342,343,346,347,350,352,354,355,356,358,359,360,362,365,366,369,370,372,373,374,375,376,377,378,379,380,381,],[4,-173,25,30,-16,-173,77,81,83,86,-133,-125,-131,-126,-124,-61,-128,-136,-122,-144,-137,-138,140,-173,-135,-129,-132,-123,-127,-134,-63,169,172,175,-113,-28,-18,-52,-173,-50,-51,-45,-53,-34,-31,-49,-46,-61,-42,-29,-41,-30,-173,-44,-33,-43,-130,-173,-143,-15,-57,-60,-64,-86,-84,-88,-95,-91,-173,-89,-87,-90,-93,-85,-94,-92,-110,-111,-173,-173,-115,256,-173,-173,-24,-21,-40,-37,-35,-173,-38,-55,-27,-25,-39,-173,-62,-139,-68,-163,-173,303,-106,-104,-173,311,-117,-112,-161,-173,-20,-19,-22,-36,-142,-167,-157,-158,-159,-160,-67,-164,-58,-166,-170,-162,-168,-173,-165,-109,-173,-100,-17,-114,345,-154,-23,-48,-32,-26,-47,-59,-136,-105,-103,-173,-116,-118,-54,-156,-150,-173,-171,-141,-146,-173,-140,303,-96,-173,-173,-173,-101,-169,-173,-172,-173,-145,-173,-149,-173,-173,-155,]),'LCB':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,186,187,188,189,190,191,192,193,194,197,210,229,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,323,340,357,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-82,-80,-77,-76,-79,117,-78,-81,-83,117,117,117,117,-74,-75,117,-73,117,-71,-72,-69,-70,117,117,117,117,117,117,117,117,]),'KEY_READBOOL':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,67,-173,-15,-173,-173,67,-173,67,67,67,-173,-173,-173,67,67,67,-173,-173,67,67,]),'KEY_STRING':([34,37,46,72,76,79,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,180,186,187,188,189,190,191,192,193,194,197,210,229,241,250,256,261,262,263,264,269,270,271,272,273,274,283,287,297,299,302,313,323,340,341,357,],[120,120,120,120,165,165,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,165,-82,-80,-77,-76,-79,120,-78,-81,-83,120,120,120,165,165,120,-74,-75,120,-73,120,-71,-72,-69,-70,120,120,120,120,120,165,165,120,120,165,120,]),'KEY_END':([7,15,16,129,140,154,157,158,159,160,161,162,163,165,166,167,168,174,184,216,238,243,244,246,249,258,282,298,301,303,304,325,326,327,334,335,337,338,339,351,352,358,360,362,365,366,369,370,373,375,377,379,380,],[-173,-16,68,-173,-15,-86,-88,-95,-91,-173,-89,-87,-90,-93,-85,-94,-92,-173,-173,280,-173,304,-106,-104,309,316,-173,-173,-109,-173,-100,350,-173,-152,-148,356,-105,-103,-173,-151,-173,-173,370,-96,-173,-153,376,-101,378,-173,-173,-147,381,]),'AT':([7,15,16,34,37,46,72,88,91,92,94,99,101,107,112,114,117,122,124,126,127,128,129,131,133,134,135,136,137,139,140,143,144,145,146,147,150,152,153,164,174,184,186,187,188,189,190,191,192,193,194,197,199,210,216,228,229,238,245,249,256,258,261,262,263,264,269,270,271,272,273,274,283,284,287,297,298,299,323,340,345,352,357,358,365,366,369,373,375,377,379,380,],[-173,-16,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-173,69,69,69,69,69,69,69,-15,69,69,69,69,69,69,69,69,69,-173,-173,-82,-80,-77,-76,-79,69,-78,-81,-83,69,69,69,69,69,69,-173,69,69,69,69,-74,-75,69,-73,69,-71,-72,-69,-70,69,69,69,69,69,69,69,69,69,69,-173,69,-173,-173,69,69,69,-173,-173,69,69,]),'IDENT':([1,7,8,9,12,13,15,16,19,23,27,34,37,46,68,69,72,76,77,79,80,81,84,86,88,89,91,92,94,99,101,107,112,114,117,122,124,126,127,128,129,131,133,134,135,136,137,139,140,143,144,145,146,147,150,152,153,160,164,169,172,174,175,180,184,186,187,188,189,190,191,192,193,194,197,199,210,216,228,229,238,241,245,249,250,256,258,261,262,263,264,269,270,271,272,273,274,283,284,287,297,298,299,302,303,309,311,313,314,323,339,340,341,345,352,357,358,365,366,369,373,375,377,379,380,],[3,-173,17,21,28,29,-16,75,17,21,28,75,75,75,148,149,75,166,-10,166,171,-12,173,-8,75,178,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-173,75,75,75,75,75,75,75,-15,75,75,75,75,75,75,75,75,21,75,-9,-11,-173,-7,166,-173,-82,-80,-77,-76,-79,75,-78,-81,-83,75,75,75,75,75,75,-173,166,75,75,166,75,75,-74,-75,75,-73,75,-71,-72,-69,-70,75,75,75,75,75,75,75,166,21,-121,178,166,344,75,21,75,166,75,-173,75,-173,-173,75,75,75,-173,-173,75,75,]),'KEY_BREAK':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,70,-173,-15,-173,-173,70,-173,70,70,70,-173,-173,-173,70,70,70,-173,-173,70,70,]),'KEY_CONST':([4,5,6,10,19,23,25,27,30,77,81,83,85,86,169,172,175,],[-173,-6,12,-5,-3,-4,-173,-2,-14,-10,-12,-13,12,-8,-9,-11,-7,]),'KEY_ADD':([7,15,16,129,140,174,184,216,238,249,258,298,352,358,365,366,369,373,375,377,379,380,],[-173,-16,73,-173,-15,-173,-173,73,-173,73,73,73,-173,-173,-173,73,73,73,-173,-173,73,73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'identList':([9,23,160,303,339,],[20,20,242,242,242,]),'fileStatement':([16,216,249,258,298,366,369,373,379,380,],[31,31,31,31,31,31,31,31,31,31,]),'constantDeclaration':([12,27,],[26,87,]),'length':([164,340,],[247,361,]),'type':([76,79,180,241,250,302,313,341,],[155,170,255,301,310,337,343,362,]),'comass':([247,],[308,]),'switchStatement':([16,216,249,258,298,366,369,373,379,380,],[35,35,35,35,35,35,35,35,35,35,]),'recordType':([76,79,180,241,250,302,313,341,],[157,157,157,157,157,157,157,157,]),'typeDeclaration':([8,19,],[18,78,]),'number':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,191,197,210,229,256,263,269,274,283,287,297,299,323,340,357,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'casess':([282,326,],[325,351,]),'conss':([12,],[27,]),'simpleExpression':([34,37,46,72,88,92,112,117,126,127,128,134,135,136,137,139,143,145,147,153,164,191,197,210,229,256,269,283,287,297,299,323,340,357,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,260,96,96,96,96,96,96,96,96,96,96,96,96,]),'ifStatement':([16,216,249,258,298,366,369,373,379,380,],[40,40,40,40,40,40,40,40,40,40,]),'char':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,191,197,210,229,256,263,269,274,283,287,297,299,323,340,348,357,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,364,118,]),'identdef':([16,34,37,46,72,88,91,92,94,99,101,107,112,114,117,122,124,126,127,128,131,133,134,135,136,137,139,143,144,145,146,147,150,152,153,164,191,197,199,210,216,228,229,245,249,256,258,263,269,274,283,284,287,297,298,299,323,340,345,357,366,369,373,379,380,],[44,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,220,111,111,111,111,111,111,231,111,234,111,111,111,111,111,111,111,111,111,44,290,111,111,44,111,44,111,111,111,111,329,111,111,44,111,111,111,111,111,44,44,44,44,44,]),'element':([117,269,],[205,320,]),'boolean':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,191,197,210,229,256,263,269,274,283,287,297,299,323,340,357,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'fieldListSequence':([160,339,],[243,360,]),'doWhileStatement':([16,216,249,258,298,366,369,373,379,380,],[45,45,45,45,45,45,45,45,45,45,]),'variableDeclaration':([9,23,],[22,82,]),'string':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,191,197,210,229,256,263,269,274,281,283,287,295,297,299,323,340,357,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,324,108,108,332,108,108,108,108,108,]),'addOperator':([196,259,267,],[263,263,263,]),'case':([219,282,326,],[282,326,326,]),'fps':([178,],[254,]),'qualident':([16,34,37,46,72,88,91,92,94,99,101,107,112,114,117,122,124,126,127,128,131,134,135,136,137,139,143,145,147,150,152,153,164,191,197,199,210,216,229,245,249,256,258,263,269,274,283,287,297,298,299,323,340,345,357,366,369,373,379,380,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,218,57,57,57,57,57,57,57,57,237,239,57,57,57,57,57,57,57,57,306,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'empty':([4,7,16,25,57,98,119,129,160,174,177,178,184,185,202,216,238,247,249,258,265,275,282,298,303,326,339,352,358,365,366,369,373,375,377,379,380,],[5,15,48,5,142,195,208,15,244,15,252,253,15,195,195,48,15,307,48,48,208,208,327,334,244,327,244,15,15,15,48,48,48,15,15,48,48,]),'ifss':([298,],[335,]),'module':([0,],[2,]),'statementSequence':([7,129,174,184,238,352,358,365,375,377,],[16,216,249,258,298,366,369,373,379,380,]),'declarationSequence':([4,25,],[6,85,]),'procedureDeclaration':([6,10,85,],[14,24,14,]),'varType':([76,79,180,241,250,302,313,341,],[154,154,154,154,154,154,154,154,]),'expression':([34,37,46,72,88,92,112,117,126,127,128,134,135,136,137,139,143,145,147,153,164,197,210,229,256,269,283,287,297,299,323,340,357,],[93,125,132,151,176,183,203,206,213,214,215,221,222,223,224,227,230,232,235,240,248,203,203,224,315,206,328,330,333,336,347,248,368,]),'assignment':([16,91,216,249,258,298,345,366,369,373,379,380,],[51,181,51,51,51,51,363,51,51,51,51,51,]),'designator':([16,34,37,46,72,88,91,92,94,99,101,107,112,114,117,122,124,126,127,128,134,135,136,137,139,143,145,147,153,164,191,197,199,210,216,229,249,256,258,263,269,274,283,287,297,298,299,323,340,345,357,366,369,373,379,380,],[52,106,106,106,106,106,182,106,106,106,106,106,106,106,106,106,212,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,266,106,52,106,52,106,52,106,106,106,106,106,106,52,106,106,106,182,106,52,52,52,52,52,]),'memoryalloc':([16,216,249,258,298,366,369,373,379,380,],[53,53,53,53,53,53,53,53,53,53,]),'setStatement':([16,216,249,258,298,366,369,373,379,380,],[55,55,55,55,55,55,55,55,55,55,]),'relation':([96,],[191,]),'actualParameters':([52,106,],[138,201,]),'statement':([16,216,249,258,298,366,369,373,379,380,],[56,56,56,56,56,56,56,56,56,56,]),'varss':([9,],[23,]),'procedureBody':([25,],[84,]),'pointerType':([76,79,180,241,250,302,313,341,],[161,161,161,161,161,161,161,161,]),'procss':([6,85,],[10,10,]),'arrayType':([76,79,180,241,250,302,313,341,],[162,162,162,162,162,162,162,162,]),'ioStatement':([16,216,249,258,298,366,369,373,379,380,],[62,62,62,62,62,62,62,62,62,62,]),'procedureHeading':([6,10,85,],[11,11,11,]),'procedureCall':([16,216,249,258,298,366,369,373,379,380,],[63,63,63,63,63,63,63,63,63,63,]),'formalss':([177,],[251,]),'fpSection':([89,311,],[177,342,]),'termss':([119,265,275,],[209,209,209,]),'designator2':([57,],[141,]),'expList':([137,229,],[226,291,]),'formalParameters':([29,],[90,]),'forStatement':([16,216,249,258,298,366,369,373,379,380,],[66,66,66,66,66,66,66,66,66,66,]),'term':([34,37,46,72,88,92,94,107,112,117,126,127,128,134,135,136,137,139,143,145,147,153,164,191,197,210,229,256,263,269,283,287,297,299,323,340,357,],[98,98,98,98,98,98,185,202,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,317,98,98,98,98,98,98,98,98,]),'factor':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,191,197,210,229,256,263,269,274,283,287,297,299,323,340,357,],[119,119,119,119,119,119,119,198,200,119,119,204,119,211,119,119,119,119,119,119,119,119,119,119,119,119,119,119,265,275,119,119,119,119,321,119,119,119,119,119,119,119,]),'fieldList':([160,303,339,],[246,338,246,]),'set':([34,37,46,72,88,92,94,99,101,107,112,114,117,122,126,127,128,134,135,136,137,139,143,145,147,153,164,191,197,210,229,256,263,269,274,283,287,297,299,323,340,357,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'simpless':([98,185,202,],[196,259,267,]),'whileStatement':([16,216,249,258,298,366,369,373,379,380,],[38,38,38,38,38,38,38,38,38,38,]),'baseType':([245,],[305,]),'typess':([8,],[19,]),'mulOperator':([209,],[274,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> KEY_MODULE IDENT SCOLON declarationSequence KEY_BEGIN statementSequence KEY_END IDENT DOT','module',9,'p_module','par.py',28),
  ('declarationSequence -> declarationSequence KEY_CONST conss','declarationSequence',3,'p_declarationSequence','par.py',33),
  ('declarationSequence -> declarationSequence KEY_TYPE typess','declarationSequence',3,'p_declarationSequence','par.py',34),
  ('declarationSequence -> declarationSequence KEY_VAR varss','declarationSequence',3,'p_declarationSequence','par.py',35),
  ('declarationSequence -> declarationSequence procss','declarationSequence',2,'p_declarationSequence','par.py',36),
  ('declarationSequence -> empty','declarationSequence',1,'p_declarationSequence','par.py',37),
  ('conss -> conss constantDeclaration SCOLON','conss',3,'p_conss','par.py',42),
  ('conss -> constantDeclaration SCOLON','conss',2,'p_conss','par.py',43),
  ('typess -> typess typeDeclaration SCOLON','typess',3,'p_typess','par.py',48),
  ('typess -> typeDeclaration SCOLON','typess',2,'p_typess','par.py',49),
  ('varss -> varss variableDeclaration SCOLON','varss',3,'p_varss','par.py',54),
  ('varss -> variableDeclaration SCOLON','varss',2,'p_varss','par.py',55),
  ('procss -> procss procedureDeclaration SCOLON','procss',3,'p_procss','par.py',60),
  ('procss -> procedureDeclaration SCOLON','procss',2,'p_procss','par.py',61),
  ('statementSequence -> statementSequence statement SCOLON','statementSequence',3,'p_statementSequence','par.py',66),
  ('statementSequence -> empty','statementSequence',1,'p_statementSequence','par.py',67),
  ('constantDeclaration -> IDENT ASSIGN expression COLON type','constantDeclaration',5,'p_constantDeclaration','par.py',72),
  ('expression -> simpleExpression','expression',1,'p_expression','par.py',77),
  ('expression -> simpleExpression relation simpleExpression','expression',3,'p_expression','par.py',78),
  ('simpleExpression -> PLUS term simpless','simpleExpression',3,'p_simpleExpression','par.py',83),
  ('simpleExpression -> term simpless','simpleExpression',2,'p_simpleExpression','par.py',84),
  ('simpleExpression -> MINUS term simpless','simpleExpression',3,'p_simpleExpression','par.py',85),
  ('simpless -> simpless addOperator term','simpless',3,'p_simpless','par.py',90),
  ('simpless -> empty','simpless',1,'p_simpless','par.py',91),
  ('term -> factor termss','term',2,'p_term','par.py',96),
  ('termss -> termss mulOperator factor','termss',3,'p_termss','par.py',101),
  ('termss -> empty','termss',1,'p_termss','par.py',102),
  ('factor -> number','factor',1,'p_factor','par.py',107),
  ('factor -> boolean','factor',1,'p_factor','par.py',108),
  ('factor -> char','factor',1,'p_factor','par.py',109),
  ('factor -> string','factor',1,'p_factor','par.py',110),
  ('factor -> KEY_NIL LRB designator RRB','factor',4,'p_factor','par.py',111),
  ('factor -> set','factor',1,'p_factor','par.py',112),
  ('factor -> designator','factor',1,'p_factor','par.py',113),
  ('factor -> designator actualParameters','factor',2,'p_factor','par.py',114),
  ('factor -> LRB expression RRB','factor',3,'p_factor','par.py',115),
  ('factor -> NOT factor','factor',2,'p_factor','par.py',116),
  ('factor -> KEY_ABS factor','factor',2,'p_factor','par.py',117),
  ('factor -> KEY_CHR factor','factor',2,'p_factor','par.py',118),
  ('factor -> KEY_ORD factor','factor',2,'p_factor','par.py',119),
  ('factor -> KEY_INTEGER','factor',1,'p_factor','par.py',120),
  ('factor -> KEY_BOOLEAN','factor',1,'p_factor','par.py',121),
  ('factor -> KEY_CHAR','factor',1,'p_factor','par.py',122),
  ('factor -> KEY_STRING','factor',1,'p_factor','par.py',123),
  ('factor -> KEY_REAL','factor',1,'p_factor','par.py',124),
  ('factor -> KEY_SET','factor',1,'p_factor','par.py',125),
  ('factor -> KEY_CHR LRB factor RRB','factor',4,'p_factor','par.py',126),
  ('factor -> KEY_ORD LRB factor RRB','factor',4,'p_factor','par.py',127),
  ('number -> VINTEGER','number',1,'p_number','par.py',132),
  ('number -> VREAL','number',1,'p_number','par.py',133),
  ('boolean -> VBOOLEAN','boolean',1,'p_boolean','par.py',138),
  ('char -> VCHAR','char',1,'p_char','par.py',143),
  ('string -> VSTRING','string',1,'p_string','par.py',148),
  ('set -> LCB element COMMA element RCB','set',5,'p_set','par.py',153),
  ('set -> LCB RCB','set',2,'p_set','par.py',154),
  ('element -> expression','element',1,'p_element','par.py',159),
  ('designator -> qualident designator2','designator',2,'p_designator','par.py',164),
  ('designator2 -> designator2 DOT identdef','designator2',3,'p_designator2','par.py',169),
  ('designator2 -> designator2 LSB expList RSB','designator2',4,'p_designator2','par.py',170),
  ('designator2 -> empty','designator2',1,'p_designator2','par.py',171),
  ('qualident -> identdef','qualident',1,'p_qualident','par.py',176),
  ('qualident -> identdef DOT qualident','qualident',3,'p_qualident','par.py',177),
  ('identdef -> IDENT','identdef',1,'p_identdef','par.py',182),
  ('identdef -> AT IDENT','identdef',2,'p_identdef','par.py',183),
  ('expList -> expList COMMA expression','expList',3,'p_expList','par.py',188),
  ('expList -> expression','expList',1,'p_expList','par.py',189),
  ('actualParameters -> LRB expList RRB','actualParameters',3,'p_actualParameters','par.py',194),
  ('actualParameters -> LRB RRB','actualParameters',2,'p_actualParameters','par.py',195),
  ('mulOperator -> MULTIPLY','mulOperator',1,'p_mulOperator','par.py',200),
  ('mulOperator -> DIVIDE','mulOperator',1,'p_mulOperator','par.py',201),
  ('mulOperator -> MODULUS','mulOperator',1,'p_mulOperator','par.py',202),
  ('mulOperator -> AND','mulOperator',1,'p_mulOperator','par.py',203),
  ('addOperator -> PLUS','addOperator',1,'p_addOperator','par.py',208),
  ('addOperator -> MINUS','addOperator',1,'p_addOperator','par.py',209),
  ('addOperator -> OR','addOperator',1,'p_addOperator','par.py',210),
  ('relation -> EQUAL','relation',1,'p_relation','par.py',215),
  ('relation -> NEQUAL','relation',1,'p_relation','par.py',216),
  ('relation -> LT','relation',1,'p_relation','par.py',217),
  ('relation -> LTEQ','relation',1,'p_relation','par.py',218),
  ('relation -> GT','relation',1,'p_relation','par.py',219),
  ('relation -> GTEQ','relation',1,'p_relation','par.py',220),
  ('relation -> KEY_IN','relation',1,'p_relation','par.py',221),
  ('relation -> KEY_IS','relation',1,'p_relation','par.py',222),
  ('typeDeclaration -> IDENT EQUAL type','typeDeclaration',3,'p_typeDeclaration','par.py',227),
  ('type -> IDENT','type',1,'p_type','par.py',232),
  ('type -> varType','type',1,'p_type','par.py',233),
  ('type -> arrayType','type',1,'p_type','par.py',234),
  ('type -> recordType','type',1,'p_type','par.py',235),
  ('type -> pointerType','type',1,'p_type','par.py',236),
  ('varType -> KEY_INTEGER','varType',1,'p_varType','par.py',241),
  ('varType -> KEY_BOOLEAN','varType',1,'p_varType','par.py',242),
  ('varType -> KEY_CHAR','varType',1,'p_varType','par.py',243),
  ('varType -> KEY_STRING','varType',1,'p_varType','par.py',244),
  ('varType -> KEY_REAL','varType',1,'p_varType','par.py',245),
  ('varType -> KEY_SET','varType',1,'p_varType','par.py',246),
  ('arrayType -> KEY_ARRAY length comass KEY_OF type','arrayType',5,'p_arrayType','par.py',251),
  ('comass -> comass COMMA length','comass',3,'p_comass','par.py',256),
  ('comass -> empty','comass',1,'p_comass','par.py',257),
  ('length -> expression','length',1,'p_length','par.py',262),
  ('recordType -> KEY_RECORD fieldListSequence KEY_END','recordType',3,'p_recordType','par.py',267),
  ('recordType -> KEY_RECORD LRB baseType RRB fieldListSequence KEY_END','recordType',6,'p_recordType','par.py',268),
  ('baseType -> qualident','baseType',1,'p_baseType','par.py',273),
  ('fieldListSequence -> fieldListSequence SCOLON fieldList','fieldListSequence',3,'p_fieldListSequence','par.py',278),
  ('fieldListSequence -> fieldList','fieldListSequence',1,'p_fieldListSequence','par.py',279),
  ('fieldList -> identList COLON type','fieldList',3,'p_fieldList','par.py',284),
  ('fieldList -> empty','fieldList',1,'p_fieldList','par.py',285),
  ('identList -> identList COMMA IDENT','identList',3,'p_identList','par.py',290),
  ('identList -> IDENT','identList',1,'p_identList','par.py',291),
  ('pointerType -> KEY_POINTER KEY_TO type','pointerType',3,'p_pointerType','par.py',296),
  ('variableDeclaration -> identList COLON type','variableDeclaration',3,'p_variableDeclaration','par.py',302),
  ('procedureDeclaration -> procedureHeading SCOLON procedureBody IDENT','procedureDeclaration',4,'p_procedureDeclaration','par.py',307),
  ('procedureHeading -> KEY_PROCEDURE IDENT formalParameters COLON type','procedureHeading',5,'p_procedureHeading','par.py',312),
  ('procedureHeading -> KEY_PROCEDURE IDENT formalParameters','procedureHeading',3,'p_procedureHeading','par.py',313),
  ('formalParameters -> LRB fpSection formalss RRB','formalParameters',4,'p_formalParameters','par.py',318),
  ('formalParameters -> LRB RRB','formalParameters',2,'p_formalParameters','par.py',319),
  ('formalss -> formalss SCOLON fpSection','formalss',3,'p_formalss','par.py',324),
  ('formalss -> empty','formalss',1,'p_formalss','par.py',325),
  ('fpSection -> IDENT fps COLON type','fpSection',4,'p_fpSection','par.py',330),
  ('fps -> fps COMMA IDENT','fps',3,'p_fps','par.py',335),
  ('fps -> empty','fps',1,'p_fps','par.py',336),
  ('procedureBody -> declarationSequence KEY_BEGIN statementSequence KEY_END','procedureBody',4,'p_procedureBody','par.py',341),
  ('statement -> assignment','statement',1,'p_statement','par.py',346),
  ('statement -> procedureCall','statement',1,'p_statement','par.py',347),
  ('statement -> ifStatement','statement',1,'p_statement','par.py',348),
  ('statement -> switchStatement','statement',1,'p_statement','par.py',349),
  ('statement -> whileStatement','statement',1,'p_statement','par.py',350),
  ('statement -> forStatement','statement',1,'p_statement','par.py',351),
  ('statement -> doWhileStatement','statement',1,'p_statement','par.py',352),
  ('statement -> KEY_EXIT','statement',1,'p_statement','par.py',353),
  ('statement -> KEY_RETURN expression','statement',2,'p_statement','par.py',354),
  ('statement -> KEY_RETURN','statement',1,'p_statement','par.py',355),
  ('statement -> ioStatement','statement',1,'p_statement','par.py',356),
  ('statement -> fileStatement','statement',1,'p_statement','par.py',357),
  ('statement -> KEY_BREAK','statement',1,'p_statement','par.py',358),
  ('statement -> KEY_CONTINUE','statement',1,'p_statement','par.py',359),
  ('statement -> empty','statement',1,'p_statement','par.py',360),
  ('statement -> memoryalloc','statement',1,'p_statement','par.py',361),
  ('statement -> setStatement','statement',1,'p_statement','par.py',362),
  ('assignment -> designator ASSIGN expression','assignment',3,'p_assignment','par.py',367),
  ('setStatement -> KEY_ADD LRB qualident COMMA expression RRB','setStatement',6,'p_setStatement','par.py',372),
  ('setStatement -> KEY_DEL LRB qualident COMMA expression RRB','setStatement',6,'p_setStatement','par.py',373),
  ('memoryalloc -> KEY_NEW LRB designator RRB','memoryalloc',4,'p_memoryalloc','par.py',379),
  ('procedureCall -> designator actualParameters','procedureCall',2,'p_procedureCall','par.py',385),
  ('procedureCall -> designator','procedureCall',1,'p_procedureCall','par.py',386),
  ('ifStatement -> KEY_IF expression KEY_THEN statementSequence ifss KEY_ELSE statementSequence KEY_END','ifStatement',8,'p_ifStatement','par.py',391),
  ('ifStatement -> KEY_IF expression KEY_THEN statementSequence ifss KEY_END','ifStatement',6,'p_ifStatement','par.py',392),
  ('ifss -> ifss KEY_ELSEIF expression KEY_THEN statementSequence','ifss',5,'p_ifss','par.py',397),
  ('ifss -> empty','ifss',1,'p_ifss','par.py',398),
  ('switchStatement -> KEY_SWITCH expression KEY_BEGIN case casess KEY_ELSE COLON statementSequence KEY_END','switchStatement',9,'p_switchStatement','par.py',403),
  ('switchStatement -> KEY_SWITCH expression KEY_BEGIN case casess KEY_END','switchStatement',6,'p_switchStatement','par.py',404),
  ('casess -> case casess','casess',2,'p_casess','par.py',409),
  ('casess -> empty','casess',1,'p_casess','par.py',410),
  ('case -> KEY_CASE expression COLON statementSequence','case',4,'p_case','par.py',415),
  ('whileStatement -> KEY_WHILE expression KEY_BEGIN statementSequence KEY_END','whileStatement',5,'p_whileStatement','par.py',420),
  ('forStatement -> KEY_FOR LRB assignment SCOLON expression SCOLON assignment RRB KEY_BEGIN statementSequence KEY_END','forStatement',11,'p_forStatement','par.py',425),
  ('doWhileStatement -> KEY_DO KEY_BEGIN statementSequence KEY_END KEY_WHILE expression','doWhileStatement',6,'p_doWhileStatement','par.py',430),
  ('ioStatement -> KEY_WRITE LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',435),
  ('ioStatement -> KEY_WRITEINT LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',436),
  ('ioStatement -> KEY_WRITEREAL LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',437),
  ('ioStatement -> KEY_WRITECHAR LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',438),
  ('ioStatement -> KEY_WRITEBOOL LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',439),
  ('ioStatement -> KEY_WRITELN LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',440),
  ('ioStatement -> KEY_WRITELN LRB RRB','ioStatement',3,'p_ioStatement','par.py',441),
  ('ioStatement -> KEY_READ LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',442),
  ('ioStatement -> KEY_READINT LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',443),
  ('ioStatement -> KEY_READREAL LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',444),
  ('ioStatement -> KEY_READCHAR LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',445),
  ('ioStatement -> KEY_READBOOL LRB expression RRB','ioStatement',4,'p_ioStatement','par.py',446),
  ('fileStatement -> identdef EQUAL KEY_FOPEN LRB string COMMA char RRB','fileStatement',8,'p_fileStatement','par.py',451),
  ('fileStatement -> KEY_FCLOSE LRB identdef RRB','fileStatement',4,'p_fileStatement','par.py',452),
  ('fileStatement -> KEY_FPRINTF LRB identdef COMMA string RRB','fileStatement',6,'p_fileStatement','par.py',453),
  ('fileStatement -> KEY_FREAD LRB identdef COMMA identdef COMMA VINTEGER RRB','fileStatement',8,'p_fileStatement','par.py',454),
  ('empty -> <empty>','empty',0,'p_empty','par.py',459),
]
